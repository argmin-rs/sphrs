var searchIndex = JSON.parse('{\
"sphrs":{"doc":"A general purpose spherical/solid harmonics library in …","t":[4,3,3,13,13,16,4,13,13,8,8,13,13,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,10,11,10,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11],"n":["ComplexSH","Coordinates","HarmonicsSet","IrregularSolid","IrregularSolid","Output","RealSH","RegularSolid","RegularSolid","SHCoordinates","SHEval","Spherical","Spherical","SphrsFloat","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cartesian","clone","clone","clone","clone_into","clone_into","clone_into","default","eval","eval","eval","eval","eval_with_coefficients","fmt","from","from","from","from","into","into","into","into","irregular_solid_sh","new","num_sh","phi","phi","r","r","real_irregular_solid_sh","real_regular_solid_sh","real_sh","real_sh_hardcoded","regular_solid_sh","sh","sh00","sh10","sh1n1","sh1p1","sh20","sh2n1","sh2n2","sh2p1","sh2p2","sh30","sh3n1","sh3n2","sh3n3","sh3p1","sh3p2","sh3p3","spherical","theta","theta","theta_cos","theta_cos","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x","x","y","y","z","z"],"q":["sphrs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Available types of complex spherical harmonics and solid …","Representation of coordinates.","A set of spherical/solid harmonics up to a given degree","Irregular solid harmonics","Irregular solid harmonics","Output type","Available types of real spherical harmonics and solid …","Regular solid harmonics","Regular solid harmonics","SHCoordinates trait","SH eval trait (TODO)","Spherical harmonics","Spherical harmonics","Trait alias to simplify common trait bounds","","","","","","","","","Create <code>Coordinates</code> struct from Cartesian coordinates","","","","","","","","Evaluate SH (l, m) at position <code>p</code>","Evaluate harmonics at position <code>p</code> without coefficients.","Evaluate complex SH (l, m) at position <code>p</code>","Evaluate real SH (l, m) at position <code>p</code>","Evaluate harmonics at position <code>p</code> with a given vector of …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Complex irregular solid harmonics","Create new <code>HarmonicsSet</code> struct","Returns the total number of spherical harmonics in the set","Return <code>phi</code> (spherical coordinates)","Return angle <code>phi</code>","Return radus <code>r</code> (spherical coordinates)","Return radius <code>r</code>","Real irregular solid harmonics","Real regular solid harmonics","Real spherical harmonics (recursive implementation)","Accelerated spherical harmonics.","Complex regular solid harmonics","Complex spherical harmonics","SH (l=0,m=0)","SH (l=1,m=0)","SH (l=1,m=-1)","SH (l=1,m=1)","SH (l=2,m=0)","SH (l=2,m=-1)","SH (l=2,m=-2)","SH (l=2,m=1)","SH (l=2,m=2)","SH (l=3,m=0)","SH (l=3,m=-1)","SH (l=3,m=-2)","SH (l=3,m=-3)","SH (l=3,m=1)","SH (l=3,m=2)","SH (l=3,m=3)","Create <code>Coordinates</code> struct from spherical coordinates","Return <code>theta</code> (spherical coordinates)","Return angle <code>theta</code>","Return <code>cos(theta)</code>","Return <code>cos(theta)</code>","","","","","","","","","","","","","","","","Return <code>x</code> (Cartesian coordinates)","Return coordinate <code>x</code>","Return <code>y</code> (Cartesian coordinates)","Return coordinate <code>y</code>","Return <code>z</code> (Cartesian coordinates)","Return coordinate <code>z</code>"],"i":[0,0,0,3,4,17,0,3,4,0,0,3,4,0,7,1,3,4,7,1,3,4,1,1,3,4,1,3,4,1,17,7,3,4,7,1,7,1,3,4,7,1,3,4,0,7,7,18,1,18,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,18,1,18,1,1,3,4,7,1,3,4,7,1,3,4,7,1,3,4,18,1,18,1,18,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[[1,[2]]],[[1,[2]]]],[3,3],[4,4],[[]],[[]],[[]],[[],[[1,[5]]]],[[6,6]],[7,8],[[3,6,6],9],[[4,6,6]],[7,8],[[[1,[10]],11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,6],[[9,[13]]]],[14,7],[7,14],[[]],[1],[[]],[1],[[6,6],13],[[6,6],13],[[6,6],13],[[6,6],13],[[6,6],[[9,[13]]]],[[6,6],[[9,[13]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],1],[[]],[1],[[]],[1],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[]],[1],[[]],[1],[[]],[1]],"p":[[3,"Coordinates"],[8,"Clone"],[4,"ComplexSH"],[4,"RealSH"],[8,"Default"],[15,"i64"],[3,"HarmonicsSet"],[3,"Vec"],[3,"Complex"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"SphrsFloat"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"SHEval"],[8,"SHCoordinates"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
