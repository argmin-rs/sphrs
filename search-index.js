var N=null,E="",T="t",U="u",searchIndex={};
var R=["Spherical","Spherical harmonics","RegularSolid","Regular solid harmonics","IrregularSolid","Irregular solid harmonics","shcoordinates","sphrsfloat","complex","realshtype","realharmonics","with_coefficients","Add coefficients","Evaluate harmonics at postion `p`. This will respect…","try_from","try_into","borrow_mut","result","type_id","to_owned","clone_into","sphrs::coords","borrow","typeid","theta_cos","coordinates","RealSHType","ComplexSHType","SHCoordinates","Coordinates","RealHarmonics","ComplexHarmonics"];

searchIndex["sphrs"]={"doc":"A (work in progress) general purpose spherical/solid…","i":[[3,R[30],"sphrs","Real spherical/solid harmonics",N,N],[3,R[31],E,"Complex spherical/solid harmonics",N,N],[4,R[26],E,"Available types of real spherical harmonics and solid…",N,N],[13,R[0],E,R[1],0,N],[13,R[2],E,R[3],0,N],[13,R[4],E,R[5],0,N],[4,R[27],E,"Available types of complex spherical harmonics and solid…",N,N],[13,R[0],E,R[1],1,N],[13,R[2],E,R[3],1,N],[13,R[4],E,R[5],1,N],[0,"coords",E,"Coordi",N,N],[3,R[29],R[21],"Coordinates struct",N,N],[8,R[28],E,"SHCoordinates trait",N,N],[10,"theta",E,"Return `theta`",2,[[["self"]],[T]]],[10,"phi",E,"Return `phi`",2,[[["self"]],[T]]],[10,"r",E,"Return `r`",2,[[["self"]],[T]]],[10,"x",E,"Return `x`",2,[[["self"]],[T]]],[10,"y",E,"Return `y`",2,[[["self"]],[T]]],[10,"z",E,"Return `z`",2,[[["self"]],[T]]],[10,R[24],E,"Return `cos(theta)`",2,[[["self"]],[T]]],[11,"cartesian",E,"Create `Coordinates` struct from cartesian coordinates",3,[[[T]],["self"]]],[11,"spherical",E,"Create `Coordinates` struct from spherical coordinates",3,[[[T]],["self"]]],[0,"sh","sphrs","Spherical/solid harmonics",N,N],[5,"sh00","sphrs::sh","Hardcoded SH (l=0,m=0)",N,[[[R[6]]],[R[7]]]],[5,"sh1n1",E,"Hardcoded SH (l=1,m=-1)",N,[[[R[6]]],[R[7]]]],[5,"sh10",E,"Hardcoded SH (l=1,m=0)",N,[[[R[6]]],[R[7]]]],[5,"sh1p1",E,"Hardcoded SH (l=1,m=1)",N,[[[R[6]]],[R[7]]]],[5,"sh2n2",E,"Hardcoded SH (l=2,m=-2)",N,[[[R[6]]],[R[7]]]],[5,"sh2n1",E,"Hardcoded SH (l=2,m=-1)",N,[[[R[6]]],[R[7]]]],[5,"sh20",E,"Hardcoded SH (l=2,m=0)",N,[[[R[6]]],[R[7]]]],[5,"sh2p1",E,"Hardcoded SH (l=2,m=1)",N,[[[R[6]]],[R[7]]]],[5,"sh2p2",E,"Hardcoded SH (l=2,m=2)",N,[[[R[6]]],[R[7]]]],[5,"sh3n3",E,"Hardcoded SH (l=3,m=-3)",N,[[[R[6]]],[R[7]]]],[5,"sh3n2",E,"Hardcoded SH (l=3,m=-2)",N,[[[R[6]]],[R[7]]]],[5,"sh3n1",E,"Hardcoded SH (l=3,m=-1)",N,[[[R[6]]],[R[7]]]],[5,"sh30",E,"Hardcoded SH (l=3,m=0)",N,[[[R[6]]],[R[7]]]],[5,"sh3p1",E,"Hardcoded SH (l=3,m=1)",N,[[[R[6]]],[R[7]]]],[5,"sh3p2",E,"Hardcoded SH (l=3,m=2)",N,[[[R[6]]],[R[7]]]],[5,"sh3p3",E,"Hardcoded SH (l=3,m=3)",N,[[[R[6]]],[R[7]]]],[5,"SH",E,"Complex spherical harmonics",N,[[["i64"],[R[6]]],[[R[8]],[R[7]]]]],[5,"real_SH",E,"Real spherical harmonics (recursive implementation)",N,[[["i64"],[R[6]]],[R[7]]]],[5,"real_SH_hardcoded",E,"Spherical harmonics. This will use the hardcoded functions…",N,[[["i64"],[R[6]]],[R[7]]]],[5,"regular_solid_SH",E,"Complex regular solid harmonics",N,[[["i64"],[R[6]]],[[R[8]],[R[7]]]]],[5,"irregular_solid_SH",E,"Complex irregular solid harmonics",N,[[["i64"],[R[6]]],[[R[8]],[R[7]]]]],[5,"real_regular_solid_SH",E,"Real regular solid harmonics",N,[[["i64"],[R[6]]],[R[7]]]],[5,"real_irregular_solid_SH",E,"Real irregular solid harmonics",N,[[["i64"],[R[6]]],[R[7]]]],[8,"SphrsFloat","sphrs","Trait alias to simplify common trait bounds",N,N],[11,"eval",E,"Evaluate real SH (l, m) at position `p`",0,[[["i64"],[R[6]]],[T]]],[11,"eval",E,"Evaluate complex SH (l, m) at position `p`",1,[[["i64"],[R[6]]],[R[8]]]],[11,"new",E,"Create new `RealHarmonics` struct",4,[[[R[9]],["usize"]],[R[10]]]],[11,R[11],E,R[12],4,[[["self"],["vec"]],["self"]]],[11,"eval",E,R[13],4,[[[R[6]],["self"]],["vec"]]],[11,"new",E,"Create new `ComplexHarmonics` struct",5,[[[R[9]],["usize"]],[R[10]]]],[11,R[11],E,R[12],5,[[["vec",[R[8]]],["self"],[R[8]]],["self"]]],[11,"eval",E,R[13],5,[[[R[6]],["self"]],[["vec",[R[8]]],[R[8]]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[14],E,E,4,[[[U]],[R[17]]]],[11,R[15],E,E,4,[[],[R[17]]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[14],E,E,5,[[[U]],[R[17]]]],[11,R[15],E,E,5,[[],[R[17]]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"],[T]]]],[11,R[14],E,E,0,[[[U]],[R[17]]]],[11,R[15],E,E,0,[[],[R[17]]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"],[T]]]],[11,R[14],E,E,1,[[[U]],[R[17]]]],[11,R[15],E,E,1,[[],[R[17]]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[23]]]],[11,"into",R[21],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[20],E,E,3,[[["self"],[T]]]],[11,R[14],E,E,3,[[[U]],[R[17]]]],[11,R[15],E,E,3,[[],[R[17]]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[R[23]]]],[11,"theta",E,E,3,[[["self"]],[T]]],[11,"phi",E,E,3,[[["self"]],[T]]],[11,"r",E,E,3,[[["self"]],[T]]],[11,"x",E,E,3,[[["self"]],[T]]],[11,"y",E,E,3,[[["self"]],[T]]],[11,"z",E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,"clone",E,E,3,[[["self"]],[R[25]]]],[11,"clone","sphrs",E,0,[[["self"]],[R[9]]]],[11,"clone",E,E,1,[[["self"]],["complexshtype"]]],[11,"default",R[21],E,3,[[],[R[25]]]],[11,"fmt",E,E,3,[[["self"],["formatter"]],[R[17]]]]],"p":[[4,R[26]],[4,R[27]],[8,R[28]],[3,R[29]],[3,R[30]],[3,R[31]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);