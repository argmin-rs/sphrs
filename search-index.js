var searchIndex = JSON.parse('{\
"sphrs":{"doc":"A general purpose spherical/solid harmonics library in …","t":[4,3,13,13,4,13,13,8,13,13,8,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,3,8,11,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,10,11,11,11,11,11,10,11,10,11,10,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["ComplexSHType","HarmonicsSet","IrregularSolid","IrregularSolid","RealSHType","RegularSolid","RegularSolid","SHEval","Spherical","Spherical","SphrsFloat","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coords","eval","eval","eval","eval","from","from","from","into","into","into","new","sh","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_coefficients","Coordinates","SHCoordinates","borrow","borrow_mut","cartesian","clone","clone_into","default","fmt","from","into","phi","phi","r","r","spherical","theta","theta","theta_cos","theta_cos","to_owned","try_from","try_into","type_id","x","x","y","y","z","z","SH","irregular_solid_SH","real_SH","real_SH_hardcoded","real_irregular_solid_SH","real_regular_solid_SH","regular_solid_SH","sh00","sh10","sh1n1","sh1p1","sh20","sh2n1","sh2n2","sh2p1","sh2p2","sh30","sh3n1","sh3n2","sh3n3","sh3p1","sh3p2","sh3p3"],"q":["sphrs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sphrs::coords","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sphrs::sh","","","","","","","","","","","","","","","","","","","","","",""],"d":["Available types of complex spherical harmonics and solid …","A set of spherical/solid harmonics up to a given degree","Irregular solid harmonics","Irregular solid harmonics","Available types of real spherical harmonics and solid …","Regular solid harmonics","Regular solid harmonics","SH eval trait (TODO)","Spherical harmonics","Spherical harmonics","Trait alias to simplify common trait bounds","","","","","","","","","","","Coordinates","Evaluate SH (l, m) at position <code>p</code>","Evaluate harmonics at position <code>p</code>. This will respect …","Evaluate real SH (l, m) at position <code>p</code>","Evaluate complex SH (l, m) at position <code>p</code>","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new <code>HarmonicsSet</code> struct","Spherical/solid harmonics","","","","","","","","","","","","Add coefficients","Coordinates struct","SHCoordinates trait","","","Create <code>Coordinates</code> struct from cartesian coordinates","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return <code>phi</code>","","Return <code>r</code>","","Create <code>Coordinates</code> struct from spherical coordinates","Return <code>theta</code>","","Return <code>cos(theta)</code>","","","","","","Return <code>x</code>","","Return <code>y</code>","","Return <code>z</code>","","Complex spherical harmonics","Complex irregular solid harmonics","Real spherical harmonics (recursive implementation)","Spherical harmonics. This will use the hardcoded functions …","Real irregular solid harmonics","Real regular solid harmonics","Complex regular solid harmonics","Hardcoded SH (l=0,m=0)","Hardcoded SH (l=1,m=0)","Hardcoded SH (l=1,m=-1)","Hardcoded SH (l=1,m=1)","Hardcoded SH (l=2,m=0)","Hardcoded SH (l=2,m=-1)","Hardcoded SH (l=2,m=-2)","Hardcoded SH (l=2,m=1)","Hardcoded SH (l=2,m=2)","Hardcoded SH (l=3,m=0)","Hardcoded SH (l=3,m=-1)","Hardcoded SH (l=3,m=-2)","Hardcoded SH (l=3,m=-3)","Hardcoded SH (l=3,m=1)","Hardcoded SH (l=3,m=2)","Hardcoded SH (l=3,m=3)"],"i":[0,0,1,2,0,1,2,0,1,2,0,5,1,2,5,1,2,1,2,1,2,0,19,5,1,2,5,1,2,5,1,2,5,0,1,2,5,1,2,5,1,2,5,1,2,5,0,0,12,12,12,12,12,12,12,12,12,4,12,4,12,12,4,12,4,12,12,12,12,12,4,12,4,12,4,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,[[3,3,4]],[5,6],[[1,3,3,4]],[[2,3,3,4],7],[[]],[[]],[[]],[[]],[[]],[[]],[8,5],0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[5,6],5],0,0,[[]],[[]],[[11,11,11],12],[[[12,[13]]],[[12,[13]]]],[[]],[[],[[12,[14]]]],[[[12,[15]],16],17],[[]],[[]],[[]],[12],[[]],[12],[[11,11,11],12],[[]],[12],[[]],[12],[[]],[[],9],[[],9],[[],10],[[]],[12],[[]],[12],[[]],[12],[[3,3,4],[[7,[18]]]],[[3,3,4],[[7,[18]]]],[[3,3,4],18],[[3,3,4],18],[[3,3,4],18],[[3,3,4],18],[[3,3,4],[[7,[18]]]],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18],[4,18]],"p":[[4,"RealSHType"],[4,"ComplexSHType"],[15,"i64"],[8,"SHCoordinates"],[3,"HarmonicsSet"],[3,"Vec"],[3,"Complex"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"Into"],[3,"Coordinates"],[8,"Clone"],[8,"Default"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"SphrsFloat"],[8,"SHEval"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
