var N=null,E="",T="t",U="u",searchIndex={};
var R=["shcoordinates","sphrsfloat","complex","result","try_from","try_into","borrow","borrow_mut","type_id","typeid","sphrs::coords","to_owned","clone_into","theta_cos","realshtype","coordinates","RealSHType","SHCoordinates","Coordinates","RealHarmonics"];

searchIndex["sphrs"]={"doc":"A (work in progress) general purpose spherical/solid…","i":[[3,R[19],"sphrs","Real spherical/solid harmonics",N,N],[4,R[16],E,"Available types of real spherical harmonics and solid…",N,N],[13,"Spherical",E,"Spherical harmonics",0,N],[13,"RegularSolid",E,"Regular solid harmonics",0,N],[13,"IrregularSolid",E,"Irregular solid harmonics",0,N],[0,"coords",E,"Coordi",N,N],[3,R[18],R[10],"Coordinates struct",N,N],[8,R[17],E,"SHCoordinates trait",N,N],[10,"theta",E,"Return `theta`",1,[[["self"]],[T]]],[10,"phi",E,"Return `phi`",1,[[["self"]],[T]]],[10,"r",E,"Return `r`",1,[[["self"]],[T]]],[10,"x",E,"Return `x`",1,[[["self"]],[T]]],[10,"y",E,"Return `y`",1,[[["self"]],[T]]],[10,"z",E,"Return `z`",1,[[["self"]],[T]]],[10,R[13],E,"Return `cos(theta)`",1,[[["self"]],[T]]],[11,"cartesian",E,"Create `Coordinates` struct from cartesian coordinates",2,[[[T]],["self"]]],[11,"spherical",E,"Create `Coordinates` struct from spherical coordinates",2,[[[T]],["self"]]],[0,"sh","sphrs","Spherical/solid harmonics",N,N],[5,"sh00","sphrs::sh","Hardcoded SH (l=0,m=0)",N,[[[R[0]]],[R[1]]]],[5,"sh1n1",E,"Hardcoded SH (l=1,m=-1)",N,[[[R[0]]],[R[1]]]],[5,"sh10",E,"Hardcoded SH (l=1,m=0)",N,[[[R[0]]],[R[1]]]],[5,"sh1p1",E,"Hardcoded SH (l=1,m=1)",N,[[[R[0]]],[R[1]]]],[5,"sh2n2",E,"Hardcoded SH (l=2,m=-2)",N,[[[R[0]]],[R[1]]]],[5,"sh2n1",E,"Hardcoded SH (l=2,m=-1)",N,[[[R[0]]],[R[1]]]],[5,"sh20",E,"Hardcoded SH (l=2,m=0)",N,[[[R[0]]],[R[1]]]],[5,"sh2p1",E,"Hardcoded SH (l=2,m=1)",N,[[[R[0]]],[R[1]]]],[5,"sh2p2",E,"Hardcoded SH (l=2,m=2)",N,[[[R[0]]],[R[1]]]],[5,"sh3n3",E,"Hardcoded SH (l=3,m=-3)",N,[[[R[0]]],[R[1]]]],[5,"sh3n2",E,"Hardcoded SH (l=3,m=-2)",N,[[[R[0]]],[R[1]]]],[5,"sh3n1",E,"Hardcoded SH (l=3,m=-1)",N,[[[R[0]]],[R[1]]]],[5,"sh30",E,"Hardcoded SH (l=3,m=0)",N,[[[R[0]]],[R[1]]]],[5,"sh3p1",E,"Hardcoded SH (l=3,m=1)",N,[[[R[0]]],[R[1]]]],[5,"sh3p2",E,"Hardcoded SH (l=3,m=2)",N,[[[R[0]]],[R[1]]]],[5,"sh3p3",E,"Hardcoded SH (l=3,m=3)",N,[[[R[0]]],[R[1]]]],[5,"SH",E,"Complex spherical harmonics",N,[[["i64"],[R[0]]],[[R[2]],[R[1]]]]],[5,"real_SH",E,"Real spherical harmonics (recursive implementation)",N,[[["i64"],[R[0]]],[R[1]]]],[5,"real_SH_hardcoded",E,"Spherical harmonics. This will use the hardcoded functions…",N,[[["i64"],[R[0]]],[R[1]]]],[5,"regular_solid_SH",E,"Complex regular solid harmonics",N,[[["i64"],[R[0]]],[[R[2]],[R[1]]]]],[5,"irregular_solid_SH",E,"Complex irregular solid harmonics",N,[[["i64"],[R[0]]],[[R[2]],[R[1]]]]],[5,"real_regular_solid_SH",E,"Real regular solid harmonics",N,[[["i64"],[R[0]]],[R[1]]]],[5,"real_irregular_solid_SH",E,"Real irregular solid harmonics",N,[[["i64"],[R[0]]],[R[1]]]],[8,"SphrsFloat","sphrs","Trait alias to simplify common trait bounds",N,N],[11,"eval",E,"Evaluate SH (l, m) at position `p`",0,[[["i64"],[R[0]]],[T]]],[11,"new",E,"Create new `RealHarmonics` struct",3,[[["usize"],[R[14]]],["realharmonics"]]],[11,"with_coefficients",E,"Add coefficients",3,[[["self"],["vec"]],["self"]]],[11,"eval",E,"Evaluate harmonics at postion `p`. This will respect…",3,[[[R[0]],["self"]],["vec"]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[4],E,E,3,[[[U]],[R[3]]]],[11,R[5],E,E,3,[[],[R[3]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[11],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"],[T]]]],[11,R[4],E,E,0,[[[U]],[R[3]]]],[11,R[5],E,E,0,[[],[R[3]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,"into",R[10],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[11],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"],[T]]]],[11,R[4],E,E,2,[[[U]],[R[3]]]],[11,R[5],E,E,2,[[],[R[3]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,"theta",E,E,2,[[["self"]],[T]]],[11,"phi",E,E,2,[[["self"]],[T]]],[11,"r",E,E,2,[[["self"]],[T]]],[11,"x",E,E,2,[[["self"]],[T]]],[11,"y",E,E,2,[[["self"]],[T]]],[11,"z",E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[T]]],[11,"clone",E,E,2,[[["self"]],[R[15]]]],[11,"clone","sphrs",E,0,[[["self"]],[R[14]]]],[11,"default",R[10],E,2,[[],[R[15]]]],[11,"fmt",E,E,2,[[["self"],["formatter"]],[R[3]]]]],"p":[[4,R[16]],[8,R[17]],[3,R[18]],[3,R[19]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);